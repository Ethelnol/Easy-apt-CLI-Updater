#!/bin/bash

declare newUIVersion="2.9.0"
declare versionCheck=""
declare optsStr=""
declare quiet=false
declare -i currentStep=0

declare upgradeOutput=""
declare installOutput=""
declare removeOutput=""
declare withheldOutput=""
declare -i upgradeNum=0
declare -i installNum=0
declare -i removeNum=0
declare -i withheldNum=0
declare -a upgradeArr=()
declare -a installArr=()
declare -a removeArr=()
declare -a withheldArr=()

main(){
	local ran=false

	echo -n "Getting list of updated packages..."
	sudo apt-get update &> /dev/null < /dev/null
	if $quiet; then echo ""; else echo " Done"; fi

	(( currentStep+=1 )) #==1

	echo -n "Sorting packing information..."
	SortPackageInfo "$(sudo apt-get upgrade --assume-no)"

	if (( $? == 1 )); then
		if $quiet; then echo ""; else echo " Done"; fi
		return 1
	fi

	if $quiet; then echo ""; else echo " Done"; fi

	(( currentStep+=1 )) #==2

	versionCheck="$(\
		echo -e "$newUIVersion\n$(\
			apt -v |\
			awk '{print $2}'\
		)" |\
		sort -V |\
		tail -1 \
	)"

	if (( upgradeNum + installNum )); then Update && ran=true; fi
	
	if (( removeNum )); then Remove && ran=true; fi

	echo -ne "\nUpdate complete"

	if $ran; then echo -n ": Nothing to do"; fi

	echo ""
	
	if $ran
		then return 0
		else return 1
	fi
}

#returns $false if ("-h" or "--help" is passed as an option) 
GetOpts(){
	local -a optsArr=()
	local i
	
	read -ra optsArr <<< "$*"

	for i in "${optsArr[@]}"; do
		if [[ "$i" == "-h" ]] || [[ "$i" == "--help" ]]; then
			DisplayHelp
			exit 1
		fi

		if [[ "$i" =~ ^-[q]{1,}$ ]] || [[ "$i" == "--quiet" ]]; then
			quiet=true
		fi

		if [[ -n "$optsStr" ]]; then optsStr+=" "; fi

		optsStr+="$i"
	done

	return 0
}

#returns $false if (input is empty)
SortPackageInfo(){
	if [[ -z "$*" ]]; then return 1; fi

	upgradeOutput="$(ParseMultilineString \
		"The following packages will be upgraded:" \
		"" \
		"$*" \
	)"
	upgradeOutput="$(UntilSpecificChar "[[:digit:]]" "$upgradeOutput")"

	installOutput="$(ParseMultilineString \
		"The following NEW packages will be installed:" \
		"" \
		"$*" \
	)"
	installOutput="$(UntilSpecificChar "[[:upper:]]" "$installOutput")"

	removeOutput="$(ParseMultilineString \
		"The following packages were automatically installed and are no longer required:" \
		"" \
		"$*" \
	)"
	if [[ -z "$removeOutput" ]]; then removeOutput="$(ParseMultilineString \
		"The following package was automatically installed and is no longer required:" \
		"" \
		"$*" \
	)"; fi
	removeOutput="$(UntilSpecificChar "[[:upper:]]" "$removeOutput")"

	withheldOutput="$(ParseMultilineString \
		"The following packages have been kept back:" \
		"" \
		"$*" \
	)"
	withheldOutput="$(UntilSpecificChar "[[:upper:]]" "$withheldOutput")"

	IFS=$'\n\t ' read -rd '' -a upgradeArr  <<<"$upgradeOutput"
	IFS=$'\n\t ' read -rd '' -a installArr  <<<"$installOutput"
	IFS=$'\n\t ' read -rd '' -a removeArr   <<<"$removeOutput"
	IFS=$'\n\t ' read -rd '' -a withheldArr <<<"$withheldOutput"
	
	upgradeNum=${#upgradeArr[@]}
	installNum=${#installArr[@]}
	removeNum=${#removeArr[@]}
	withheldNum=${#withheldArr[@]}

	return 0
}

#returns $true if (update run successfully)
#returns $false if (update interrupted)
Update(){
	echo -e "$upgradeNum packages are upgradable, $installNum will be newly installed\n"

	#if $version is more recent, the threshold version will be the output of the echo
	if [[ "$versionCheck" == "$newUIVersion" ]]; then
		local i

		if (( upgradeNum)); then
			echo "Upgrading:"
			for i in "${upgradeArr[@]}"; do echo -e "\t$i"; done
			echo ""
		fi

		if (( installNum )); then
			echo "Installing:"
			for i in "${installArr[@]}"; do echo -e "\t$i"; done
			echo ""
		fi

		if (( withheldNum )); then
			echo "Ignoring:"
			for i in "${withheldArr[@]}"; do echo -e "\t$i"; done
			echo ""
		fi

		unset i
	fi

	eval "sudo apt upgrade $optsStr"
	
	return $?
}

#returns $true if (apt autoremove was prompted successfully)
#returns $false if ($numRemovable == 0)
Remove(){
	echo "$removeNum packages can be removed"

	if [[ "$versionCheck" == "$newUIVersion" ]]; then
		echo "Removing:"
		for i in "${removeArr[@]}"; do echo -e "\t$i"; done
		echo ""
	fi

	eval "sudo apt autoremove -qq $optsStr"

	return $?
}

#prints lines between $top and $bot non inclusively
#if $top||$bot == "", then the respective filter is skipped
#if $top||$bot not in $str, then "" is printed
ParseMultilineString(){
	if [[ -z "$3" ]]; then echo ""; return; fi

	local top="$1"
	local bot="$2"
	local str="$3"

	local arrLimits=("$top" "$bot")
	local arrChecks=("head" "tail")

	local limit=""
	local check=""
	local sort=""

	local -i lines
	local -i i
	
	lines=$(( "$(echo "$str" | wc -l)" ))

	for (( i=0; i<2; i++)); do
		limit="${arrLimits[i]}"
		
		if [[ -z "$limit" ]]; then continue; fi

		check="${arrChecks[i]}"
		sort="${arrChecks[i-1]}"

		while [[ "$(echo "$str" | eval "$check -1")" != "$limit" ]]; do
			lines=$(( lines - 1 ))
			str="$(echo "$str" | eval "$sort -n $lines")"
			if [[ -z "$str" ]]; then echo ""; return; fi
		done

		lines=$(( lines - 1 ))
		str="$(echo "$str" | eval "$sort -n $lines")"
	done

	echo "$str"
	return
}

#returns (input until $pattern is reached) or (input if $pattern is never reached)
UntilSpecificChar(){
	local pattern="$1"; shift 1
	local -a sourceArr
	local returnStr=""
	local i

	IFS=$'\n' read -rd '' -a sourceArr <<<"$*"

	for i in "${sourceArr[@]}"; do
		if [[ -z "$i" ]]; then break; fi

		if [[ ! "${i:0:1}" =~ $pattern ]]; then
			if [[ -n "$returnStr" ]]; then returnStr+="\n"; fi
			returnStr+="$i"
		else
			break
		fi
	done

	echo -e "$returnStr"
	return
}

#returns (help information)
DisplayHelp(){
	echo "help [ph]"
}

#returns true if (user is root) or (user executes sudo)
#returns false if (user cannot execute sudo) or (user does not execute sudo)
SudoCheck(){	
	if [[ "$(whoami)" != "root" ]]; then
		(sudo -l &> /dev/null) && sudo echo -n "" && return 0

		echo -e "Error: requires sudo privileges\n"; return 1
	fi
	return 0
}

# shellcheck disable=SC2317
SIGINT_Interupt(){
	echo -ne "\nStopping update: "
	case $currentStep in
		0)
			echo -n "Package list retrieval"
			;;

		1)
			echo -n "Package sorting"
			;;

		2)
			echo -n "Updating/Removal process"
			;;
	esac
	echo " interrupted"
	tput cnorm
}

#has script handle SIGINT itself
trap 'SIGINT_Interupt; exit 1' SIGINT

tput civis
SudoCheck && GetOpts "$@" && main
tput cnorm

exit 0
